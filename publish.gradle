/*
 * Copyright (C) Ryan Scott
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'maven-publish'

afterEvaluate { project ->

    task sourcesJar(type: Jar, dependsOn: project.classes) {
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: project.javadoc) {
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }


    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : ''
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : ''
        publications = ["bintray"]
        pkg {
            repo = 'maven'
            name = project.artifactId
            licenses = project.licenses
            vcsUrl = project.vcsUrl
            publicDownloadNumbers = true
            version {
                name = project.version
                desc = project.libDesc
                released = new Date()
                vcsTag = "v${project.version}"
            }
        }
    }


    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java
                artifact sourcesJar {
                    classifier = 'sources'
                }
                artifact javadocJar {
                    classifier = 'javadoc'
                }
                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
            bintray(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java
                artifact sourcesJar {
                    classifier = 'sources'
                }
                artifact javadocJar {
                    classifier = 'javadoc'
                }
                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
            mavenS3(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                from components.java
                pom.withXml {
                    asNode().appendNode('build')
                            .appendNode('extensions')
                            .appendNode('extension')
                            .appendNode('groupId', 'org.kuali.maven.wagons').parent()
                            .appendNode('artifactId', 'maven-s3-wagon').parent()
                            .appendNode('version', '1.2.1')
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
                artifact sourcesJar {
                    classifier = 'sources'
                }
                artifact javadocJar {
                    classifier = 'javadoc'
                }
            }
        }

        repositories {
            def awsAccessKeyId = project.hasProperty("awsMavenAccessKey") ? project.property("awsMavenAccessKey") : ""
            def awsSecretKey = project.hasProperty("awsMavenSecretKey") ? project.property("awsMavenSecretKey") : ""
            maven {
                name 'release'
                url "s3://repo.fsryan.com/release"
                credentials(AwsCredentials) {
                    accessKey = awsAccessKeyId
                    secretKey = awsSecretKey
                }
            }
            maven {
                name 'snapshot'
                url "s3://repo.fsryan.com/snapshot"
                credentials(AwsCredentials) {
                    accessKey = awsAccessKeyId
                    secretKey = awsSecretKey
                }
            }
        }
    }

//    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

    tasks.findByName('bintrayUpload').dependsOn('generatePomFileForBintrayPublication')

    task release(dependsOn: ['bintrayUpload', 'publishMavenS3PublicationToReleaseRepository']) {
        description = "Release ${project.name}-${project.version} to bintray and S3 release repos"
        group = 'Release'
        doLast {
            println "Huzzah! ${project.name}-${project.version} Successfully uploaded to bintray and S3 release repos"
        }
    }
    task releaseSnapshot(dependsOn: 'publishMavenS3PublicationToSnapshotRepository') {
        description = "Release ${project.name}-${project.version} to S3 snapshot repo"
        group = 'Release'
        doLast {
            println "Huzzah! ${project.name}-${project.version} Successfully uploaded to S3 snapshot repo"
        }
    }

//    if (JavaVersion.current().isJava8Compatible()) {
//        allprojects {
//            tasks.withType(Javadoc) {
//                options.addStringOption('Xdoclint:none', '-quiet')
//            }
//        }
//    }

//    artifacts {
//        if (project.getPlugins().hasPlugin('com.android.application') ||
//                project.getPlugins().hasPlugin('com.android.library')) {
//            archives androidSourcesJar
//            archives androidJavadocsJar
//        } else {
//            archives sourcesJar
//            archives javadocJar
//        }
//    }
}